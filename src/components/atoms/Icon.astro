---
export interface Props {
	name: string;
	alt?: string;
	size?: number;
	width?: number;
	height?: number;

	fill?: string;
	stroke?: string;
	strokeWidth?: number;
}

import * as path from 'node:path'
import * as fs from 'node:fs/promises'

import * as feather from 'feather-icons'

const {
	name: iconName,
	alt,
	size = 24,
	width = size,
	height = size,
	fill = 'none',
	stroke = 'currentColor',
	strokeWidth = 2
} = Astro.props

async function resolveCustomIconPath(
	iconName: string,
	baseDir = path.resolve('public/assets/icons')
): Promise<string | null> {
	const iconDir = await fs.readdir(baseDir)

	for (const itemName of iconDir) {
		const itemPath = path.join(baseDir, itemName)

		if (
			(await fs.stat(itemPath))
				.isDirectory()
		) {
			return resolveCustomIconPath(iconName, itemPath)
		} else if(path.basename(itemPath, path.extname(itemPath)) === iconName) {
			// we've got our icon! return its full path
			return itemPath
		}
	}

	// no custom icon was found
	return null
}

function injectAltText(svg: string, alt: string): string {
	const openingTagRegex = /\<svg[^>]*\>/g
	const openingTag = openingTagRegex.exec(svg)[0]

	return svg
		.replace(
			openingTagRegex,
			`\
${openingTag}\
<title>${alt}</title>`
		)
}

async function getIconMarkup(iconName: string): Promise<string> {
	const customIconPath = await resolveCustomIconPath(iconName)

	if(customIconPath) {
		if(!customIconPath.endsWith('.svg'))
			throw new EvalError(`Icon ${iconName} is not an SVG file. Can't render it!`)

		// inner icon content (no outer svg tag)
		const iconInner = (await fs.readFile(customIconPath))
			.toString()
			// remove all <svg /> tags -- just leave the paths and all intact
			.replace(/\<\/?svg[^>]*\>/g, '')

		const markup =
`<svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">` + iconInner + `</svg>`
		return injectAltText(markup, alt)
	} else {
		if (iconName in feather.icons) {
			const icon = feather.icons[iconName]

			const markup = icon
				.toSvg({
					width,
					height,
					fill,
					stroke,
					'stroke-width': strokeWidth
				})

			return injectAltText(markup, alt)
		}
	}
}

const iconMarkup = await getIconMarkup(iconName)
---

{iconMarkup}
